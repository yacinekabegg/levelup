// LevelUp Application - Version Ultra Simple
console.log('LevelUp Application - Version Ultra Simple charg√©e');

// Donn√©es utilisateur
let userData = {
    level: 3,
    xp: 120,
    maxXp: 200,
    weeklyObjectives: []
};

// Charger les donn√©es
function loadUserData() {
    const saved = localStorage.getItem('levelup_userdata');
    if (saved) {
        try {
            const parsed = JSON.parse(saved);
            userData = { ...userData, ...parsed };
            console.log('Donn√©es charg√©es:', userData);
        } catch (e) {
            console.error('Erreur lors du chargement:', e);
        }
    }
}

// Sauvegarder les donn√©es
function saveUserData() {
    try {
        localStorage.setItem('levelup_userdata', JSON.stringify(userData));
        console.log('Donn√©es sauvegard√©es');
    } catch (e) {
        console.error('Erreur lors de la sauvegarde:', e);
    }
}

// Mettre √† jour l'interface
function updateUI() {
    console.log('Mise √† jour de l\'interface');
    
    // Mettre √† jour le niveau et XP
    const levelElement = document.getElementById('currentLevel');
    const xpElement = document.getElementById('currentXp');
    const xpBarElement = document.getElementById('xpBar');
    
    if (levelElement) levelElement.textContent = `Niveau ${userData.level}`;
    if (xpElement) xpElement.textContent = `${userData.xp} / ${userData.maxXp} XP`;
    if (xpBarElement) {
        const percentage = (userData.xp / userData.maxXp) * 100;
        xpBarElement.style.width = `${percentage}%`;
    }
    
    // Mettre √† jour les objectifs hebdomadaires
    updateWeeklyObjectives();
}

// Mettre √† jour les objectifs hebdomadaires
function updateWeeklyObjectives() {
    console.log('Mise √† jour des objectifs hebdomadaires');
    console.log('Objectifs actuels:', userData.weeklyObjectives);
    
    const objectivesContainer = document.getElementById('weeklyObjectives');
    
    console.log('Container trouv√©:', objectivesContainer);
    
    if (!objectivesContainer) {
        console.error('Container weeklyObjectives non trouv√©');
        return;
    }
    
    objectivesContainer.innerHTML = '';

    if (userData.weeklyObjectives.length === 0) {
        console.log('Aucun objectif, affichage du message vide');
        objectivesContainer.innerHTML = `
            <div class="text-center py-6 text-gray-500">
                <div class="text-3xl mb-2">üìÖ</div>
                <p>Aucun objectif hebdomadaire</p>
                <p class="text-sm">Ajoutez vos objectifs pour la semaine</p>
            </div>
        `;
        return;
    }

    console.log('Affichage de', userData.weeklyObjectives.length, 'objectifs');
    
    userData.weeklyObjectives.forEach((objective, index) => {
        console.log('Affichage objectif:', objective);
        
        const priorityIcons = {
            low: 'üü¢',
            medium: 'üü°',
            high: 'üî¥'
        };

        const objectiveElement = document.createElement('div');
        objectiveElement.className = `flex items-center p-3 bg-gradient-to-r from-green-50 to-blue-50 rounded-xl border border-green-200 ${objective.completed ? 'opacity-60' : ''}`;
        objectiveElement.innerHTML = `
            <div class="flex items-center flex-1">
                <span class="text-lg mr-3">${priorityIcons[objective.priority] || 'üü°'}</span>
                <div class="flex-1">
                    <div class="font-medium text-gray-800">${objective.text}</div>
                    <div class="text-sm text-gray-600">${objective.category}</div>
                </div>
            </div>
            <div class="flex items-center space-x-2">
                <button onclick="toggleWeeklyObjective(${index})" class="text-green-600 hover:text-green-800 p-1" title="${objective.completed ? 'Marquer comme non termin√©' : 'Marquer comme termin√©'}">
                    ${objective.completed ? '‚úÖ' : '‚≠ï'}
                </button>
                <button onclick="deleteWeeklyObjective(${index})" class="text-red-600 hover:text-red-800 p-1" title="Supprimer">
                    üóëÔ∏è
                </button>
            </div>
        `;
        
        objectivesContainer.appendChild(objectiveElement);
    });
    
    console.log('Mise √† jour termin√©e');
}

// Ajouter un objectif hebdomadaire
function addWeeklyObjective() {
    console.log('Ajout d\'objectif hebdomadaire');
    
    const text = prompt('Texte de l\'objectif :');
    if (!text) return;
    
    const category = prompt('Cat√©gorie :');
    if (!category) return;
    
    const priority = prompt('Priorit√© (low/medium/high) :', 'medium');
    
    const newObjective = {
        id: Date.now(),
        text: text,
        category: category,
        priority: priority || 'medium',
        completed: false,
        createdAt: new Date().toISOString()
    };
    
    console.log('Nouvel objectif cr√©√©:', newObjective);
    
    userData.weeklyObjectives.push(newObjective);
    console.log('Objectifs apr√®s ajout:', userData.weeklyObjectives);
    
    saveUserData();
    console.log('Donn√©es sauvegard√©es');
    
    updateWeeklyObjectives();
    console.log('Interface mise √† jour');
    
    alert('Objectif hebdomadaire ajout√© ! üìÖ');
}

// Basculer un objectif hebdomadaire
function toggleWeeklyObjective(index) {
    console.log('toggleWeeklyObjective appel√© avec index:', index);
    
    if (userData.weeklyObjectives[index]) {
        userData.weeklyObjectives[index].completed = !userData.weeklyObjectives[index].completed;
        saveUserData();
        updateWeeklyObjectives();
        alert(userData.weeklyObjectives[index].completed ? 
            'Objectif marqu√© comme termin√© ! ‚úÖ' : 
            'Objectif marqu√© comme non termin√© ‚≠ï');
    }
}

// Supprimer un objectif hebdomadaire
function deleteWeeklyObjective(index) {
    console.log('deleteWeeklyObjective appel√© avec index:', index);
    
    if (userData.weeklyObjectives[index]) {
        userData.weeklyObjectives.splice(index, 1);
        saveUserData();
        updateWeeklyObjectives();
        alert('Objectif supprim√© ! üóëÔ∏è');
    }
}

// Autres fonctions simplifi√©es
function completeChallenge() {
    console.log('D√©fi compl√©t√©');
    userData.xp += 30;
    saveUserData();
    updateUI();
    alert('D√©fi compl√©t√© ! +30 XP üéâ');
}

function changeChallenge() {
    console.log('Changement de d√©fi');
    alert('Nouveau d√©fi ! üîÑ');
}

function showMonthlyAssessment() {
    console.log('√âvaluation mensuelle');
    alert('Fonctionnalit√© d\'√©valuation mensuelle - En cours de d√©veloppement');
}

function showLevelHistory() {
    console.log('Historique des niveaux');
    alert('Fonctionnalit√© d\'historique - En cours de d√©veloppement');
}

function showShareModal() {
    console.log('Partage de progression');
    alert('Fonctionnalit√© de partage - En cours de d√©veloppement');
}

// Rendre les fonctions globales
window.toggleWeeklyObjective = toggleWeeklyObjective;
window.deleteWeeklyObjective = deleteWeeklyObjective;

// Initialiser
function init() {
    console.log('Initialisation de LevelUp Ultra Simple');
    
    loadUserData();
    updateUI();
    
    // Ajouter les √©v√©nements
    const elements = {
        'completeChallenge': completeChallenge,
        'changeChallenge': changeChallenge,
        'addWeeklyObjective': addWeeklyObjective,
        'monthlyAssessment': showMonthlyAssessment,
        'levelHistory': showLevelHistory,
        'shareProgress': showShareModal
    };
    
    Object.entries(elements).forEach(([id, handler]) => {
        const element = document.getElementById(id);
        if (element) {
            console.log(`√âv√©nement ajout√© pour ${id}`);
            element.addEventListener('click', handler);
        } else {
            console.warn(`√âl√©ment ${id} non trouv√©`);
        }
    });
    
    console.log('LevelUp Ultra Simple initialis√©');
}

// D√©marrer quand le DOM est pr√™t
document.addEventListener('DOMContentLoaded', init); 